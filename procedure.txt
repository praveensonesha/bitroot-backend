CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spCompleteProfile`(
    IN p JSON
)
BEGIN
    DECLARE v_user_id INT;
    DECLARE v_contact VARCHAR(20);
    DECLARE v_linkedin_url VARCHAR(255);
    DECLARE v_yoe INT;
    DECLARE v_tags JSON;

    -- Extract values from JSON input
    SET v_user_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.user_id'));
    SET v_contact = JSON_UNQUOTE(JSON_EXTRACT(p, '$.contact'));
    SET v_linkedin_url = JSON_UNQUOTE(JSON_EXTRACT(p, '$.linkedin_url'));
    SET v_yoe = JSON_UNQUOTE(JSON_EXTRACT(p, '$.yoe'));
    SET v_tags = JSON_UNQUOTE(JSON_EXTRACT(p, '$.tags'));

    START TRANSACTION;

    -- Update evaluator table
    UPDATE evaluator
    SET 
        contact = COALESCE(v_contact, contact),
        linkedin_url = COALESCE(v_linkedin_url, linkedin_url),
        yoe = COALESCE(v_yoe, yoe),
        tags = COALESCE(v_tags, tags)
    WHERE id = v_user_id;

    SELECT "success" AS msg;

    COMMIT;
END

==========================================================================================
CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spLogin`( IN p JSON)
BEGIN
    DECLARE v_email VARCHAR(100);
    DECLARE v_password VARCHAR(255);
    DECLARE v_is_admin INT;
    DECLARE user_pass VARCHAR(100);
    declare v_evaluator_id int;-- Variable to store password fetched from database

    SET v_email = JSON_UNQUOTE(JSON_EXTRACT(p, '$.email'));
    SET v_password = JSON_UNQUOTE(JSON_EXTRACT(p, '$.password'));
    SET v_is_admin = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_admin'));
   	

    START TRANSACTION;

    -- Initialize user_pass to null
    SET user_pass = NULL;

    IF v_is_admin = 1 THEN
        -- Admin login: Fetch password from admin table
        SELECT password INTO user_pass FROM admin WHERE email = v_email;
       	IF user_pass = v_password THEN
        SELECT 1 AS authenticated, 'Login success!' AS msg;
	    ELSE
	        SELECT 0 AS authenticated, 'Login failed!' AS msg;
	    END IF;
    ELSE
        -- User login: Fetch password from evaluator table
    	SELECT password, id INTO user_pass, v_evaluator_id FROM evaluator WHERE email = v_email;  	
    
       	IF user_pass = v_password THEN
        SELECT 1 AS authenticated,v_evaluator_id as id, 'Login success!' AS msg;
	    ELSE
	        SELECT 0 AS authenticated, 'Login failed!' AS msg;
	    END IF;
    END IF;

    -- Check if passwords match
    

    COMMIT;
END
========================================================================================
CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spSignup`(IN p JSON)
BEGIN
    DECLARE v_name VARCHAR(100);
    DECLARE v_email VARCHAR(100);
    DECLARE v_password VARCHAR(255);

    START TRANSACTION;

    SET v_name = JSON_UNQUOTE(JSON_EXTRACT(p, '$.name'));
    SET v_email = JSON_UNQUOTE(JSON_EXTRACT(p, '$.email'));
    SET v_password = JSON_UNQUOTE(JSON_EXTRACT(p, '$.password'));

    INSERT INTO evaluator (name, email, password)
    VALUES (v_name, v_email, v_password);
   
   	select last_insert_id()as user_id,'User Created'as msg; 

    COMMIT;
END
===================================================================================
CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spGetTags`(
    IN p JSON
)
BEGIN
   

    START TRANSACTION;

    select * from tags;

    COMMIT;
END

==================================================================================================


CREATE PROCEDURE `bitroot_db`.`spCreateTask`(
    IN p JSON
)
BEGIN
    DECLARE v_name VARCHAR(255);
    DECLARE v_description TEXT;
    DECLARE v_tags JSON;
    DECLARE v_github_url LONGTEXT;
    DECLARE v_guideline_url LONGTEXT;
    DECLARE v_lower_price INT;
    DECLARE v_higher_price INT;
    DECLARE v_is_update TINYINT;
    DECLARE v_is_delete TINYINT;
    DECLARE v_task_id INT;

    -- Extract values from JSON input
    SET v_name = JSON_UNQUOTE(JSON_EXTRACT(p, '$.name'));
    SET v_description = JSON_UNQUOTE(JSON_EXTRACT(p, '$.desc'));
    SET v_tags = JSON_UNQUOTE(JSON_EXTRACT(p, '$.tags'));
    SET v_github_url = JSON_UNQUOTE(JSON_EXTRACT(p, '$.github_url'));
    SET v_guideline_url = JSON_UNQUOTE(JSON_EXTRACT(p, '$.guideline_url'));
    SET v_lower_price = JSON_UNQUOTE(JSON_EXTRACT(p, '$.lower_price'));
    SET v_higher_price = JSON_UNQUOTE(JSON_EXTRACT(p, '$.higher_price'));
    SET v_is_update = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_update'));
    SET v_is_delete = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_delete'));
    SET v_task_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.id'));

    START TRANSACTION;

    -- Check if is_update is 1 (update operation)
    IF v_is_update = 1 then
    	if v_task_id is not null then
        UPDATE task
        SET 
            name = COALESCE(v_name, name),
            description = COALESCE(v_description, description),
            tags = COALESCE(v_tags, tags),
            github_url = COALESCE(v_github_url, github_url),
            guideline_url = COALESCE(v_guideline_url, guideline_url),
            lower_price = COALESCE(v_lower_price, lower_price),
            higher_price = COALESCE(v_higher_price, higher_price)
        WHERE id = v_task_id;
       end if;
       	
        
        SELECT v_task_id AS id, 'Task updated successfully' AS msg;
    
    -- Check if is_delete is 1 (delete operation)
    ELSEIF v_is_delete = 1 then
    	if v_task_id is not null then
        DELETE FROM task WHERE id = v_task_id;
       	end if;
        
        SELECT v_task_id AS id, 'Task deleted successfully' AS msg;
    
    -- Otherwise, create a new task
    ELSE
        -- Insert data into task table
        INSERT INTO task (name, description, tags, github_url, guideline_url, lower_price, higher_price)
        VALUES (v_name, v_description, v_tags, v_github_url, v_guideline_url, v_lower_price, v_higher_price);

        SELECT LAST_INSERT_ID() AS id, 'Task created successfully' AS msg;
    END IF;

    COMMIT;
END;
========================================================================================================================


CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spAssignTask`(
    IN p JSON
)
BEGIN
    DECLARE v_evaluator_id INT;
    DECLARE v_is_update TINYINT;
    DECLARE v_is_delete TINYINT;
    DECLARE v_task_id INT;
    DECLARE v_is_completed INT;
    DECLARE v_is_interest INT;

    -- Extract values from JSON input
    SET v_evaluator_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.evaluator_id'));
    SET v_is_update = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_update'));
    SET v_is_delete = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_delete'));
    SET v_task_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.task_id'));
    SET v_is_completed = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_completed'));
    SET v_is_interest = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_interest'));

    START TRANSACTION;

    IF v_is_update = 1 THEN
        -- Update is_completed for existing assignment
        UPDATE assigned_task
        SET is_completed = v_is_completed
        WHERE evaluator_id = v_evaluator_id AND task_id = v_task_id;
        
        SELECT 'Assignment updated successfully' AS msg;

    ELSEIF v_is_interest = 1 THEN
        -- Insert into interest_task
        INSERT INTO interest_task (evaluator_id, task_id, is_approved)
        VALUES (v_evaluator_id, v_task_id, 0); -- Default is_approved to 0
        
        SELECT LAST_INSERT_ID() AS id, 'Task added to interest list!' AS msg;

    ELSE
        -- Insert new assignment
        INSERT INTO assigned_task (evaluator_id, task_id, is_completed)
        VALUES (v_evaluator_id, v_task_id, 0); -- Default is_completed to 0
        
        update task 	
        	set assigned_to = v_evaluator_id,is_approved =1
        	where id = v_task_id;
        update interest_task 
        	set is_approved = 1
        	where task_id = v_task_id and evaluator_id = v_evaluator_id;
        
        SELECT LAST_INSERT_ID() AS id, 'Task Assigned!' AS msg;

    END IF;

    COMMIT;
END


==============================================================================================

CREATE PROCEDURE `bitroot_db`.`spGetTasks`(
    IN p JSON
)
BEGIN
    DECLARE v_name VARCHAR(255);
    DECLARE v_tags JSON;
    DECLARE v_lower_price INT;
    DECLARE v_higher_price INT;
   	declare v_is_assigned int;
   	declare v_is_completed int;
   	declare v_is_approved tinyint;

    SET v_name = JSON_UNQUOTE(JSON_EXTRACT(p, '$.name'));
    SET v_tags = JSON_UNQUOTE(JSON_EXTRACT(p, '$.tags'));
    SET v_lower_price = JSON_UNQUOTE(JSON_EXTRACT(p, '$.lower_price'));
    SET v_higher_price = JSON_UNQUOTE(JSON_EXTRACT(p, '$.higher_price'));
    SET v_is_assigned = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_assigned'));
    SET v_is_completed = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_completed'));
   	set v_is_approved = JSON_UNQUOTE(JSON_EXTRACT(p, '$.is_approved'));
   	

    START TRANSACTION;

    SELECT SQL_CALC_FOUND_ROWS *
    FROM task t
    WHERE 1=1
        AND (v_name IS NULL OR t.name LIKE CONCAT('%', v_name, '%'))
        AND (v_tags IS NULL OR JSON_CONTAINS(t.tags, v_tags))
        AND (v_lower_price IS NULL OR t.lower_price >= v_lower_price)
        AND (v_higher_price IS NULL OR t.higher_price <= v_higher_price)
        and (v_is_assigned is null or t.is_assigned = v_is_assigned)
       and (v_is_completed is null or t.is_completed = v_is_completed)
       and (v_is_approved is null or t.is_approved = v_is_approved);
       
    SELECT FOUND_ROWS() AS total;

    COMMIT;
END;=

==========================================================================================================================

CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spStartTask`(
    IN p JSON
)
BEGIN
    DECLARE v_task_id INT;

    -- Extract task ID from JSON input
    SET v_task_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.task_id'));

    START TRANSACTION;

    -- Update inProgress column to 1 for the specified task
    UPDATE task
    SET in_progress = 1
    WHERE id = v_task_id AND in_progress = 0;

    -- Check if the update was successful
    IF ROW_COUNT() > 0 THEN
        SELECT 'Task started successfully' AS msg;
    ELSE
        SELECT 'Task already in progress or does not exist' AS msg;
    END IF;

    COMMIT;
END
===========================================================================================================

CREATE DEFINER=`root`@`localhost` PROCEDURE `bitroot_db`.`spCompleteTask`(
    IN p JSON
)
BEGIN
    DECLARE v_task_id INT;
    DECLARE v_evaluator_id INT;

    -- Extract values from JSON input
    SET v_task_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.task_id'));
    SET v_evaluator_id = JSON_UNQUOTE(JSON_EXTRACT(p, '$.evaluator_id'));

    START TRANSACTION;

    -- Update is_completed in assigned_task table
    UPDATE assigned_task
    SET is_completed = 1
    WHERE task_id = v_task_id AND evaluator_id = v_evaluator_id;

    -- Update is_completed in task table
    UPDATE task
    SET is_completed = 1
    WHERE id = v_task_id;

    COMMIT;

    SELECT 'Task completed successfully' AS msg;
END;

=======================================================================================================